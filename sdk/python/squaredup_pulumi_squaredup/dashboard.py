# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['DashboardArgs', 'Dashboard']

@pulumi.input_type
class DashboardArgs:
    def __init__(__self__, *,
                 dashboard_template: pulumi.Input[str],
                 display_name: pulumi.Input[str],
                 workspace_id: pulumi.Input[str],
                 template_bindings: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Dashboard resource.
        :param pulumi.Input[str] dashboard_template: Dashboard template to use for the dashboard
        :param pulumi.Input[str] display_name: The display name of the dashboard
        :param pulumi.Input[str] workspace_id: The ID of the workspace where the dashboard is located
        :param pulumi.Input[str] template_bindings: Template Bindings used for replacing mustache template in the dashboard template. Needs to be a JSON encoded string.
        """
        pulumi.set(__self__, "dashboard_template", dashboard_template)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "workspace_id", workspace_id)
        if template_bindings is not None:
            pulumi.set(__self__, "template_bindings", template_bindings)

    @property
    @pulumi.getter(name="dashboardTemplate")
    def dashboard_template(self) -> pulumi.Input[str]:
        """
        Dashboard template to use for the dashboard
        """
        return pulumi.get(self, "dashboard_template")

    @dashboard_template.setter
    def dashboard_template(self, value: pulumi.Input[str]):
        pulumi.set(self, "dashboard_template", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Input[str]:
        """
        The display name of the dashboard
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Input[str]:
        """
        The ID of the workspace where the dashboard is located
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "workspace_id", value)

    @property
    @pulumi.getter(name="templateBindings")
    def template_bindings(self) -> Optional[pulumi.Input[str]]:
        """
        Template Bindings used for replacing mustache template in the dashboard template. Needs to be a JSON encoded string.
        """
        return pulumi.get(self, "template_bindings")

    @template_bindings.setter
    def template_bindings(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "template_bindings", value)


@pulumi.input_type
class _DashboardState:
    def __init__(__self__, *,
                 dashboard_content: Optional[pulumi.Input[str]] = None,
                 dashboard_template: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 group: Optional[pulumi.Input[str]] = None,
                 last_updated: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 schema_version: Optional[pulumi.Input[str]] = None,
                 template_bindings: Optional[pulumi.Input[str]] = None,
                 workspace_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Dashboard resources.
        :param pulumi.Input[str] dashboard_content: The content of the dashboard. This is the rendered dashboard template with the template bindings applied.
        :param pulumi.Input[str] dashboard_template: Dashboard template to use for the dashboard
        :param pulumi.Input[str] display_name: The display name of the dashboard
        :param pulumi.Input[str] group: The group of the dashboard
        :param pulumi.Input[str] last_updated: The last updated date of the dashboard
        :param pulumi.Input[str] name: The name of the dashboard
        :param pulumi.Input[str] schema_version: The schema version of the dashboard
        :param pulumi.Input[str] template_bindings: Template Bindings used for replacing mustache template in the dashboard template. Needs to be a JSON encoded string.
        :param pulumi.Input[str] workspace_id: The ID of the workspace where the dashboard is located
        """
        if dashboard_content is not None:
            pulumi.set(__self__, "dashboard_content", dashboard_content)
        if dashboard_template is not None:
            pulumi.set(__self__, "dashboard_template", dashboard_template)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if group is not None:
            pulumi.set(__self__, "group", group)
        if last_updated is not None:
            pulumi.set(__self__, "last_updated", last_updated)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if schema_version is not None:
            pulumi.set(__self__, "schema_version", schema_version)
        if template_bindings is not None:
            pulumi.set(__self__, "template_bindings", template_bindings)
        if workspace_id is not None:
            pulumi.set(__self__, "workspace_id", workspace_id)

    @property
    @pulumi.getter(name="dashboardContent")
    def dashboard_content(self) -> Optional[pulumi.Input[str]]:
        """
        The content of the dashboard. This is the rendered dashboard template with the template bindings applied.
        """
        return pulumi.get(self, "dashboard_content")

    @dashboard_content.setter
    def dashboard_content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dashboard_content", value)

    @property
    @pulumi.getter(name="dashboardTemplate")
    def dashboard_template(self) -> Optional[pulumi.Input[str]]:
        """
        Dashboard template to use for the dashboard
        """
        return pulumi.get(self, "dashboard_template")

    @dashboard_template.setter
    def dashboard_template(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dashboard_template", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        The display name of the dashboard
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def group(self) -> Optional[pulumi.Input[str]]:
        """
        The group of the dashboard
        """
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group", value)

    @property
    @pulumi.getter(name="lastUpdated")
    def last_updated(self) -> Optional[pulumi.Input[str]]:
        """
        The last updated date of the dashboard
        """
        return pulumi.get(self, "last_updated")

    @last_updated.setter
    def last_updated(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_updated", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the dashboard
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="schemaVersion")
    def schema_version(self) -> Optional[pulumi.Input[str]]:
        """
        The schema version of the dashboard
        """
        return pulumi.get(self, "schema_version")

    @schema_version.setter
    def schema_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema_version", value)

    @property
    @pulumi.getter(name="templateBindings")
    def template_bindings(self) -> Optional[pulumi.Input[str]]:
        """
        Template Bindings used for replacing mustache template in the dashboard template. Needs to be a JSON encoded string.
        """
        return pulumi.get(self, "template_bindings")

    @template_bindings.setter
    def template_bindings(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "template_bindings", value)

    @property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the workspace where the dashboard is located
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "workspace_id", value)


class Dashboard(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dashboard_template: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 template_bindings: Optional[pulumi.Input[str]] = None,
                 workspace_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Dashboard are used to visualize data from Data Sources

        ## Import

        Dashboards can be imported by specifying dashboard id.

        ```sh
         $ pulumi import squaredup:index/dashboard:Dashboard example dash-123
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] dashboard_template: Dashboard template to use for the dashboard
        :param pulumi.Input[str] display_name: The display name of the dashboard
        :param pulumi.Input[str] template_bindings: Template Bindings used for replacing mustache template in the dashboard template. Needs to be a JSON encoded string.
        :param pulumi.Input[str] workspace_id: The ID of the workspace where the dashboard is located
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DashboardArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Dashboard are used to visualize data from Data Sources

        ## Import

        Dashboards can be imported by specifying dashboard id.

        ```sh
         $ pulumi import squaredup:index/dashboard:Dashboard example dash-123
        ```

        :param str resource_name: The name of the resource.
        :param DashboardArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DashboardArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dashboard_template: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 template_bindings: Optional[pulumi.Input[str]] = None,
                 workspace_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DashboardArgs.__new__(DashboardArgs)

            if dashboard_template is None and not opts.urn:
                raise TypeError("Missing required property 'dashboard_template'")
            __props__.__dict__["dashboard_template"] = dashboard_template
            if display_name is None and not opts.urn:
                raise TypeError("Missing required property 'display_name'")
            __props__.__dict__["display_name"] = display_name
            __props__.__dict__["template_bindings"] = template_bindings
            if workspace_id is None and not opts.urn:
                raise TypeError("Missing required property 'workspace_id'")
            __props__.__dict__["workspace_id"] = workspace_id
            __props__.__dict__["dashboard_content"] = None
            __props__.__dict__["group"] = None
            __props__.__dict__["last_updated"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["schema_version"] = None
        super(Dashboard, __self__).__init__(
            'squaredup:index/dashboard:Dashboard',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            dashboard_content: Optional[pulumi.Input[str]] = None,
            dashboard_template: Optional[pulumi.Input[str]] = None,
            display_name: Optional[pulumi.Input[str]] = None,
            group: Optional[pulumi.Input[str]] = None,
            last_updated: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            schema_version: Optional[pulumi.Input[str]] = None,
            template_bindings: Optional[pulumi.Input[str]] = None,
            workspace_id: Optional[pulumi.Input[str]] = None) -> 'Dashboard':
        """
        Get an existing Dashboard resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] dashboard_content: The content of the dashboard. This is the rendered dashboard template with the template bindings applied.
        :param pulumi.Input[str] dashboard_template: Dashboard template to use for the dashboard
        :param pulumi.Input[str] display_name: The display name of the dashboard
        :param pulumi.Input[str] group: The group of the dashboard
        :param pulumi.Input[str] last_updated: The last updated date of the dashboard
        :param pulumi.Input[str] name: The name of the dashboard
        :param pulumi.Input[str] schema_version: The schema version of the dashboard
        :param pulumi.Input[str] template_bindings: Template Bindings used for replacing mustache template in the dashboard template. Needs to be a JSON encoded string.
        :param pulumi.Input[str] workspace_id: The ID of the workspace where the dashboard is located
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DashboardState.__new__(_DashboardState)

        __props__.__dict__["dashboard_content"] = dashboard_content
        __props__.__dict__["dashboard_template"] = dashboard_template
        __props__.__dict__["display_name"] = display_name
        __props__.__dict__["group"] = group
        __props__.__dict__["last_updated"] = last_updated
        __props__.__dict__["name"] = name
        __props__.__dict__["schema_version"] = schema_version
        __props__.__dict__["template_bindings"] = template_bindings
        __props__.__dict__["workspace_id"] = workspace_id
        return Dashboard(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="dashboardContent")
    def dashboard_content(self) -> pulumi.Output[str]:
        """
        The content of the dashboard. This is the rendered dashboard template with the template bindings applied.
        """
        return pulumi.get(self, "dashboard_content")

    @property
    @pulumi.getter(name="dashboardTemplate")
    def dashboard_template(self) -> pulumi.Output[str]:
        """
        Dashboard template to use for the dashboard
        """
        return pulumi.get(self, "dashboard_template")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[str]:
        """
        The display name of the dashboard
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def group(self) -> pulumi.Output[str]:
        """
        The group of the dashboard
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter(name="lastUpdated")
    def last_updated(self) -> pulumi.Output[str]:
        """
        The last updated date of the dashboard
        """
        return pulumi.get(self, "last_updated")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the dashboard
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="schemaVersion")
    def schema_version(self) -> pulumi.Output[str]:
        """
        The schema version of the dashboard
        """
        return pulumi.get(self, "schema_version")

    @property
    @pulumi.getter(name="templateBindings")
    def template_bindings(self) -> pulumi.Output[str]:
        """
        Template Bindings used for replacing mustache template in the dashboard template. Needs to be a JSON encoded string.
        """
        return pulumi.get(self, "template_bindings")

    @property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Output[str]:
        """
        The ID of the workspace where the dashboard is located
        """
        return pulumi.get(self, "workspace_id")

