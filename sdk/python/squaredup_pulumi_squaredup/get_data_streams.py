# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetDataStreamsResult',
    'AwaitableGetDataStreamsResult',
    'get_data_streams',
    'get_data_streams_output',
]

@pulumi.output_type
class GetDataStreamsResult:
    """
    A collection of values returned by getDataStreams.
    """
    def __init__(__self__, data_source_id=None, data_stream_definition_name=None, data_streams=None, id=None):
        if data_source_id and not isinstance(data_source_id, str):
            raise TypeError("Expected argument 'data_source_id' to be a str")
        pulumi.set(__self__, "data_source_id", data_source_id)
        if data_stream_definition_name and not isinstance(data_stream_definition_name, str):
            raise TypeError("Expected argument 'data_stream_definition_name' to be a str")
        pulumi.set(__self__, "data_stream_definition_name", data_stream_definition_name)
        if data_streams and not isinstance(data_streams, list):
            raise TypeError("Expected argument 'data_streams' to be a list")
        pulumi.set(__self__, "data_streams", data_streams)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="dataSourceId")
    def data_source_id(self) -> str:
        """
        ID of the data source to get data streams for
        """
        return pulumi.get(self, "data_source_id")

    @property
    @pulumi.getter(name="dataStreamDefinitionName")
    def data_stream_definition_name(self) -> Optional[str]:
        """
        Name of the data stream definition to get particular data stream details
        """
        return pulumi.get(self, "data_stream_definition_name")

    @property
    @pulumi.getter(name="dataStreams")
    def data_streams(self) -> Sequence['outputs.GetDataStreamsDataStreamResult']:
        """
        Data Streams are used to query third party APIs and SquaredUp visualizes the results
        """
        return pulumi.get(self, "data_streams")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")


class AwaitableGetDataStreamsResult(GetDataStreamsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDataStreamsResult(
            data_source_id=self.data_source_id,
            data_stream_definition_name=self.data_stream_definition_name,
            data_streams=self.data_streams,
            id=self.id)


def get_data_streams(data_source_id: Optional[str] = None,
                     data_stream_definition_name: Optional[str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDataStreamsResult:
    """
    ## Example Usage

    ```python
    import pulumi
    import pulumi_squaredup as squaredup

    example = squaredup.get_data_streams(data_source_id="datasource-id")
    ```


    :param str data_source_id: ID of the data source to get data streams for
    :param str data_stream_definition_name: Name of the data stream definition to get particular data stream details
    """
    __args__ = dict()
    __args__['dataSourceId'] = data_source_id
    __args__['dataStreamDefinitionName'] = data_stream_definition_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('squaredup:index/getDataStreams:getDataStreams', __args__, opts=opts, typ=GetDataStreamsResult).value

    return AwaitableGetDataStreamsResult(
        data_source_id=pulumi.get(__ret__, 'data_source_id'),
        data_stream_definition_name=pulumi.get(__ret__, 'data_stream_definition_name'),
        data_streams=pulumi.get(__ret__, 'data_streams'),
        id=pulumi.get(__ret__, 'id'))


@_utilities.lift_output_func(get_data_streams)
def get_data_streams_output(data_source_id: Optional[pulumi.Input[str]] = None,
                            data_stream_definition_name: Optional[pulumi.Input[Optional[str]]] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetDataStreamsResult]:
    """
    ## Example Usage

    ```python
    import pulumi
    import pulumi_squaredup as squaredup

    example = squaredup.get_data_streams(data_source_id="datasource-id")
    ```


    :param str data_source_id: ID of the data source to get data streams for
    :param str data_stream_definition_name: Name of the data stream definition to get particular data stream details
    """
    ...
