# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetDatasourcesResult',
    'AwaitableGetDatasourcesResult',
    'get_datasources',
    'get_datasources_output',
]

@pulumi.output_type
class GetDatasourcesResult:
    """
    A collection of values returned by getDatasources.
    """
    def __init__(__self__, data_source_name=None, id=None, plugins=None):
        if data_source_name and not isinstance(data_source_name, str):
            raise TypeError("Expected argument 'data_source_name' to be a str")
        pulumi.set(__self__, "data_source_name", data_source_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if plugins and not isinstance(plugins, list):
            raise TypeError("Expected argument 'plugins' to be a list")
        pulumi.set(__self__, "plugins", plugins)

    @property
    @pulumi.getter(name="dataSourceName")
    def data_source_name(self) -> Optional[str]:
        """
        The name of the data source. If not specified, all data sources will be returned.
        """
        return pulumi.get(self, "data_source_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def plugins(self) -> Sequence['outputs.GetDatasourcesPluginResult']:
        return pulumi.get(self, "plugins")


class AwaitableGetDatasourcesResult(GetDatasourcesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDatasourcesResult(
            data_source_name=self.data_source_name,
            id=self.id,
            plugins=self.plugins)


def get_datasources(data_source_name: Optional[str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDatasourcesResult:
    """
    Data Sources are used to query third party APIs and SquaredUp visualizes the results

    ## Example Usage

    ```python
    import pulumi
    import pulumi_squaredup as squaredup

    sample_data = squaredup.get_datasources(data_source_name="Sample Data")
    ```


    :param str data_source_name: The name of the data source. If not specified, all data sources will be returned.
    """
    __args__ = dict()
    __args__['dataSourceName'] = data_source_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('squaredup:index/getDatasources:getDatasources', __args__, opts=opts, typ=GetDatasourcesResult).value

    return AwaitableGetDatasourcesResult(
        data_source_name=pulumi.get(__ret__, 'data_source_name'),
        id=pulumi.get(__ret__, 'id'),
        plugins=pulumi.get(__ret__, 'plugins'))


@_utilities.lift_output_func(get_datasources)
def get_datasources_output(data_source_name: Optional[pulumi.Input[Optional[str]]] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetDatasourcesResult]:
    """
    Data Sources are used to query third party APIs and SquaredUp visualizes the results

    ## Example Usage

    ```python
    import pulumi
    import pulumi_squaredup as squaredup

    sample_data = squaredup.get_datasources(data_source_name="Sample Data")
    ```


    :param str data_source_name: The name of the data source. If not specified, all data sources will be returned.
    """
    ...
