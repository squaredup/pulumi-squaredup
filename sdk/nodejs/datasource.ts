// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Data Sources are used to query third party APIs and SquaredUp visualizes the results
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as squaredup from "@pulumi/squaredup";
 * import * as squaredup from "@squaredup/pulumi-squaredup";
 *
 * const sampleData = squaredup.getDatasources({
 *     dataSourceName: "Sample Data",
 * });
 * const sampleDataSource = new squaredup.Datasource("sampleDataSource", {
 *     displayName: "Sample Data",
 *     dataSourceName: sampleData.then(sampleData => sampleData.plugins?.[0]?.displayName),
 * });
 * const adoDatasource = new squaredup.Datasource("adoDatasource", {
 *     displayName: "Azure DevOps",
 *     dataSourceName: "Azure DevOps",
 *     config: JSON.stringify({
 *         org: "org-name",
 *         accessToken: "access-token",
 *     }),
 * });
 * ```
 *
 * ## Import
 *
 * Data Source can be imported by specifying datasource id.
 *
 * ```sh
 *  $ pulumi import squaredup:index/datasource:Datasource example config-123
 * ```
 */
export class Datasource extends pulumi.CustomResource {
    /**
     * Get an existing Datasource resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatasourceState, opts?: pulumi.CustomResourceOptions): Datasource {
        return new Datasource(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'squaredup:index/datasource:Datasource';

    /**
     * Returns true if the given object is an instance of Datasource.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Datasource {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Datasource.__pulumiType;
    }

    /**
     * The ID of the agent group to which the data source should connect to (on-prem data sources only)
     */
    public readonly agentGroupId!: pulumi.Output<string>;
    /**
     * Sensitive configuration for the data source. Needs to be a valid JSON
     */
    public readonly config!: pulumi.Output<string | undefined>;
    /**
     * Display name of the data source
     */
    public readonly dataSourceName!: pulumi.Output<string>;
    /**
     * The display name of the data source (Displayed in SquaredUp)
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * The last time the data source was updated
     */
    public /*out*/ readonly lastUpdated!: pulumi.Output<string>;

    /**
     * Create a Datasource resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatasourceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatasourceArgs | DatasourceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatasourceState | undefined;
            resourceInputs["agentGroupId"] = state ? state.agentGroupId : undefined;
            resourceInputs["config"] = state ? state.config : undefined;
            resourceInputs["dataSourceName"] = state ? state.dataSourceName : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["lastUpdated"] = state ? state.lastUpdated : undefined;
        } else {
            const args = argsOrState as DatasourceArgs | undefined;
            if ((!args || args.dataSourceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataSourceName'");
            }
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            resourceInputs["agentGroupId"] = args ? args.agentGroupId : undefined;
            resourceInputs["config"] = args?.config ? pulumi.secret(args.config) : undefined;
            resourceInputs["dataSourceName"] = args ? args.dataSourceName : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["lastUpdated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["config"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Datasource.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Datasource resources.
 */
export interface DatasourceState {
    /**
     * The ID of the agent group to which the data source should connect to (on-prem data sources only)
     */
    agentGroupId?: pulumi.Input<string>;
    /**
     * Sensitive configuration for the data source. Needs to be a valid JSON
     */
    config?: pulumi.Input<string>;
    /**
     * Display name of the data source
     */
    dataSourceName?: pulumi.Input<string>;
    /**
     * The display name of the data source (Displayed in SquaredUp)
     */
    displayName?: pulumi.Input<string>;
    /**
     * The last time the data source was updated
     */
    lastUpdated?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Datasource resource.
 */
export interface DatasourceArgs {
    /**
     * The ID of the agent group to which the data source should connect to (on-prem data sources only)
     */
    agentGroupId?: pulumi.Input<string>;
    /**
     * Sensitive configuration for the data source. Needs to be a valid JSON
     */
    config?: pulumi.Input<string>;
    /**
     * Display name of the data source
     */
    dataSourceName: pulumi.Input<string>;
    /**
     * The display name of the data source (Displayed in SquaredUp)
     */
    displayName: pulumi.Input<string>;
}
