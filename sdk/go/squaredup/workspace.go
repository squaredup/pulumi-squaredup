// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package squaredup

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
	"github.com/squaredup/pulumi-squaredup/sdk/go/squaredup/internal"
)

// Each workspace has its own dashboards, data sources, monitors and scopes.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/squaredup/pulumi-squaredup/sdk/go/squaredup"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			sampleData, err := squaredup.GetDatasources(ctx, &squaredup.GetDatasourcesArgs{
//				DataSourceName: pulumi.StringRef("Sample Data"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			sampleDataSource, err := squaredup.NewDatasource(ctx, "sampleDataSource", &squaredup.DatasourceArgs{
//				DisplayName:    pulumi.String("Sample Data"),
//				DataSourceName: *pulumi.String(sampleData.Plugins[0].DisplayName),
//			})
//			if err != nil {
//				return err
//			}
//			applicationWorkspace, err := squaredup.NewWorkspace(ctx, "applicationWorkspace", &squaredup.WorkspaceArgs{
//				DisplayName: pulumi.String("Application Team"),
//				Description: pulumi.String("Workspace with Dashboards for Application Team"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = squaredup.NewWorkspace(ctx, "devopsWorkspace", &squaredup.WorkspaceArgs{
//				DisplayName: pulumi.String("DevOps Team"),
//				Description: pulumi.String("Workspace with Dashboards for DevOps Team"),
//				Type:        pulumi.String("application"),
//				Tags: pulumi.StringArray{
//					pulumi.String("terraform"),
//					pulumi.String("auto-created"),
//				},
//				OpenAccessEnabled: pulumi.Bool(true),
//				WorkspacesLinks: pulumi.StringArray{
//					applicationWorkspace.ID(),
//				},
//				DatasourcesLinks: pulumi.StringArray{
//					sampleDataSource.ID(),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Workspaces can be imported by specifying workspace id.
//
// ```sh
//
//	$ pulumi import squaredup:index/workspace:Workspace example space-123
//
// ```
type Workspace struct {
	pulumi.CustomResourceState

	// Links to plugins
	DatasourcesLinks pulumi.StringArrayOutput `pulumi:"datasourcesLinks"`
	// The description of the workspace
	Description pulumi.StringOutput `pulumi:"description"`
	// The display name of the workspace (Displayed in SquaredUp)
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// The last time the workspace was updated
	LastUpdated pulumi.StringOutput `pulumi:"lastUpdated"`
	// Whether open access is enabled for the workspace
	OpenAccessEnabled pulumi.BoolOutput `pulumi:"openAccessEnabled"`
	// The tags of the workspace
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// Workspace type that can be one of: 'service', 'team', 'application', 'platform', 'product', 'business service', 'microservice', 'customer', 'website', 'component', 'resource', 'system', 'folder', 'other'.
	Type pulumi.StringOutput `pulumi:"type"`
	// Links to workspaces
	WorkspacesLinks pulumi.StringArrayOutput `pulumi:"workspacesLinks"`
}

// NewWorkspace registers a new resource with the given unique name, arguments, and options.
func NewWorkspace(ctx *pulumi.Context,
	name string, args *WorkspaceArgs, opts ...pulumi.ResourceOption) (*Workspace, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Workspace
	err := ctx.RegisterResource("squaredup:index/workspace:Workspace", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkspace gets an existing Workspace resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkspace(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkspaceState, opts ...pulumi.ResourceOption) (*Workspace, error) {
	var resource Workspace
	err := ctx.ReadResource("squaredup:index/workspace:Workspace", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Workspace resources.
type workspaceState struct {
	// Links to plugins
	DatasourcesLinks []string `pulumi:"datasourcesLinks"`
	// The description of the workspace
	Description *string `pulumi:"description"`
	// The display name of the workspace (Displayed in SquaredUp)
	DisplayName *string `pulumi:"displayName"`
	// The last time the workspace was updated
	LastUpdated *string `pulumi:"lastUpdated"`
	// Whether open access is enabled for the workspace
	OpenAccessEnabled *bool `pulumi:"openAccessEnabled"`
	// The tags of the workspace
	Tags []string `pulumi:"tags"`
	// Workspace type that can be one of: 'service', 'team', 'application', 'platform', 'product', 'business service', 'microservice', 'customer', 'website', 'component', 'resource', 'system', 'folder', 'other'.
	Type *string `pulumi:"type"`
	// Links to workspaces
	WorkspacesLinks []string `pulumi:"workspacesLinks"`
}

type WorkspaceState struct {
	// Links to plugins
	DatasourcesLinks pulumi.StringArrayInput
	// The description of the workspace
	Description pulumi.StringPtrInput
	// The display name of the workspace (Displayed in SquaredUp)
	DisplayName pulumi.StringPtrInput
	// The last time the workspace was updated
	LastUpdated pulumi.StringPtrInput
	// Whether open access is enabled for the workspace
	OpenAccessEnabled pulumi.BoolPtrInput
	// The tags of the workspace
	Tags pulumi.StringArrayInput
	// Workspace type that can be one of: 'service', 'team', 'application', 'platform', 'product', 'business service', 'microservice', 'customer', 'website', 'component', 'resource', 'system', 'folder', 'other'.
	Type pulumi.StringPtrInput
	// Links to workspaces
	WorkspacesLinks pulumi.StringArrayInput
}

func (WorkspaceState) ElementType() reflect.Type {
	return reflect.TypeOf((*workspaceState)(nil)).Elem()
}

type workspaceArgs struct {
	// Links to plugins
	DatasourcesLinks []string `pulumi:"datasourcesLinks"`
	// The description of the workspace
	Description *string `pulumi:"description"`
	// The display name of the workspace (Displayed in SquaredUp)
	DisplayName string `pulumi:"displayName"`
	// Whether open access is enabled for the workspace
	OpenAccessEnabled *bool `pulumi:"openAccessEnabled"`
	// The tags of the workspace
	Tags []string `pulumi:"tags"`
	// Workspace type that can be one of: 'service', 'team', 'application', 'platform', 'product', 'business service', 'microservice', 'customer', 'website', 'component', 'resource', 'system', 'folder', 'other'.
	Type *string `pulumi:"type"`
	// Links to workspaces
	WorkspacesLinks []string `pulumi:"workspacesLinks"`
}

// The set of arguments for constructing a Workspace resource.
type WorkspaceArgs struct {
	// Links to plugins
	DatasourcesLinks pulumi.StringArrayInput
	// The description of the workspace
	Description pulumi.StringPtrInput
	// The display name of the workspace (Displayed in SquaredUp)
	DisplayName pulumi.StringInput
	// Whether open access is enabled for the workspace
	OpenAccessEnabled pulumi.BoolPtrInput
	// The tags of the workspace
	Tags pulumi.StringArrayInput
	// Workspace type that can be one of: 'service', 'team', 'application', 'platform', 'product', 'business service', 'microservice', 'customer', 'website', 'component', 'resource', 'system', 'folder', 'other'.
	Type pulumi.StringPtrInput
	// Links to workspaces
	WorkspacesLinks pulumi.StringArrayInput
}

func (WorkspaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workspaceArgs)(nil)).Elem()
}

type WorkspaceInput interface {
	pulumi.Input

	ToWorkspaceOutput() WorkspaceOutput
	ToWorkspaceOutputWithContext(ctx context.Context) WorkspaceOutput
}

func (*Workspace) ElementType() reflect.Type {
	return reflect.TypeOf((**Workspace)(nil)).Elem()
}

func (i *Workspace) ToWorkspaceOutput() WorkspaceOutput {
	return i.ToWorkspaceOutputWithContext(context.Background())
}

func (i *Workspace) ToWorkspaceOutputWithContext(ctx context.Context) WorkspaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceOutput)
}

func (i *Workspace) ToOutput(ctx context.Context) pulumix.Output[*Workspace] {
	return pulumix.Output[*Workspace]{
		OutputState: i.ToWorkspaceOutputWithContext(ctx).OutputState,
	}
}

// WorkspaceArrayInput is an input type that accepts WorkspaceArray and WorkspaceArrayOutput values.
// You can construct a concrete instance of `WorkspaceArrayInput` via:
//
//	WorkspaceArray{ WorkspaceArgs{...} }
type WorkspaceArrayInput interface {
	pulumi.Input

	ToWorkspaceArrayOutput() WorkspaceArrayOutput
	ToWorkspaceArrayOutputWithContext(context.Context) WorkspaceArrayOutput
}

type WorkspaceArray []WorkspaceInput

func (WorkspaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Workspace)(nil)).Elem()
}

func (i WorkspaceArray) ToWorkspaceArrayOutput() WorkspaceArrayOutput {
	return i.ToWorkspaceArrayOutputWithContext(context.Background())
}

func (i WorkspaceArray) ToWorkspaceArrayOutputWithContext(ctx context.Context) WorkspaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceArrayOutput)
}

func (i WorkspaceArray) ToOutput(ctx context.Context) pulumix.Output[[]*Workspace] {
	return pulumix.Output[[]*Workspace]{
		OutputState: i.ToWorkspaceArrayOutputWithContext(ctx).OutputState,
	}
}

// WorkspaceMapInput is an input type that accepts WorkspaceMap and WorkspaceMapOutput values.
// You can construct a concrete instance of `WorkspaceMapInput` via:
//
//	WorkspaceMap{ "key": WorkspaceArgs{...} }
type WorkspaceMapInput interface {
	pulumi.Input

	ToWorkspaceMapOutput() WorkspaceMapOutput
	ToWorkspaceMapOutputWithContext(context.Context) WorkspaceMapOutput
}

type WorkspaceMap map[string]WorkspaceInput

func (WorkspaceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Workspace)(nil)).Elem()
}

func (i WorkspaceMap) ToWorkspaceMapOutput() WorkspaceMapOutput {
	return i.ToWorkspaceMapOutputWithContext(context.Background())
}

func (i WorkspaceMap) ToWorkspaceMapOutputWithContext(ctx context.Context) WorkspaceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceMapOutput)
}

func (i WorkspaceMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*Workspace] {
	return pulumix.Output[map[string]*Workspace]{
		OutputState: i.ToWorkspaceMapOutputWithContext(ctx).OutputState,
	}
}

type WorkspaceOutput struct{ *pulumi.OutputState }

func (WorkspaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Workspace)(nil)).Elem()
}

func (o WorkspaceOutput) ToWorkspaceOutput() WorkspaceOutput {
	return o
}

func (o WorkspaceOutput) ToWorkspaceOutputWithContext(ctx context.Context) WorkspaceOutput {
	return o
}

func (o WorkspaceOutput) ToOutput(ctx context.Context) pulumix.Output[*Workspace] {
	return pulumix.Output[*Workspace]{
		OutputState: o.OutputState,
	}
}

// Links to plugins
func (o WorkspaceOutput) DatasourcesLinks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Workspace) pulumi.StringArrayOutput { return v.DatasourcesLinks }).(pulumi.StringArrayOutput)
}

// The description of the workspace
func (o WorkspaceOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Workspace) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// The display name of the workspace (Displayed in SquaredUp)
func (o WorkspaceOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *Workspace) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// The last time the workspace was updated
func (o WorkspaceOutput) LastUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v *Workspace) pulumi.StringOutput { return v.LastUpdated }).(pulumi.StringOutput)
}

// Whether open access is enabled for the workspace
func (o WorkspaceOutput) OpenAccessEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *Workspace) pulumi.BoolOutput { return v.OpenAccessEnabled }).(pulumi.BoolOutput)
}

// The tags of the workspace
func (o WorkspaceOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Workspace) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// Workspace type that can be one of: 'service', 'team', 'application', 'platform', 'product', 'business service', 'microservice', 'customer', 'website', 'component', 'resource', 'system', 'folder', 'other'.
func (o WorkspaceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Workspace) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Links to workspaces
func (o WorkspaceOutput) WorkspacesLinks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Workspace) pulumi.StringArrayOutput { return v.WorkspacesLinks }).(pulumi.StringArrayOutput)
}

type WorkspaceArrayOutput struct{ *pulumi.OutputState }

func (WorkspaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Workspace)(nil)).Elem()
}

func (o WorkspaceArrayOutput) ToWorkspaceArrayOutput() WorkspaceArrayOutput {
	return o
}

func (o WorkspaceArrayOutput) ToWorkspaceArrayOutputWithContext(ctx context.Context) WorkspaceArrayOutput {
	return o
}

func (o WorkspaceArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*Workspace] {
	return pulumix.Output[[]*Workspace]{
		OutputState: o.OutputState,
	}
}

func (o WorkspaceArrayOutput) Index(i pulumi.IntInput) WorkspaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Workspace {
		return vs[0].([]*Workspace)[vs[1].(int)]
	}).(WorkspaceOutput)
}

type WorkspaceMapOutput struct{ *pulumi.OutputState }

func (WorkspaceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Workspace)(nil)).Elem()
}

func (o WorkspaceMapOutput) ToWorkspaceMapOutput() WorkspaceMapOutput {
	return o
}

func (o WorkspaceMapOutput) ToWorkspaceMapOutputWithContext(ctx context.Context) WorkspaceMapOutput {
	return o
}

func (o WorkspaceMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*Workspace] {
	return pulumix.Output[map[string]*Workspace]{
		OutputState: o.OutputState,
	}
}

func (o WorkspaceMapOutput) MapIndex(k pulumi.StringInput) WorkspaceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Workspace {
		return vs[0].(map[string]*Workspace)[vs[1].(string)]
	}).(WorkspaceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkspaceInput)(nil)).Elem(), &Workspace{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkspaceArrayInput)(nil)).Elem(), WorkspaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkspaceMapInput)(nil)).Elem(), WorkspaceMap{})
	pulumi.RegisterOutputType(WorkspaceOutput{})
	pulumi.RegisterOutputType(WorkspaceArrayOutput{})
	pulumi.RegisterOutputType(WorkspaceMapOutput{})
}
