// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package squaredup

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
	"github.com/squaredup/pulumi-squaredup/sdk/go/squaredup/internal"
)

// Dashboard are used to visualize data from Data Sources
//
// ## Import
//
// Dashboards can be imported by specifying dashboard id.
//
// ```sh
//
//	$ pulumi import squaredup:index/dashboard:Dashboard example dash-123
//
// ```
type Dashboard struct {
	pulumi.CustomResourceState

	// The content of the dashboard. This is the rendered dashboard template with the template bindings applied.
	DashboardContent pulumi.StringOutput `pulumi:"dashboardContent"`
	// Dashboard template to use for the dashboard
	DashboardTemplate pulumi.StringOutput `pulumi:"dashboardTemplate"`
	// The display name of the dashboard
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// The group of the dashboard
	Group pulumi.StringOutput `pulumi:"group"`
	// The last updated date of the dashboard
	LastUpdated pulumi.StringOutput `pulumi:"lastUpdated"`
	// The name of the dashboard
	Name pulumi.StringOutput `pulumi:"name"`
	// The schema version of the dashboard
	SchemaVersion pulumi.StringOutput `pulumi:"schemaVersion"`
	// Template Bindings used for replacing mustache template in the dashboard template. Needs to be a JSON encoded string.
	TemplateBindings pulumi.StringOutput `pulumi:"templateBindings"`
	// The ID of the workspace where the dashboard is located
	WorkspaceId pulumi.StringOutput `pulumi:"workspaceId"`
}

// NewDashboard registers a new resource with the given unique name, arguments, and options.
func NewDashboard(ctx *pulumi.Context,
	name string, args *DashboardArgs, opts ...pulumi.ResourceOption) (*Dashboard, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DashboardTemplate == nil {
		return nil, errors.New("invalid value for required argument 'DashboardTemplate'")
	}
	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Dashboard
	err := ctx.RegisterResource("squaredup:index/dashboard:Dashboard", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDashboard gets an existing Dashboard resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDashboard(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DashboardState, opts ...pulumi.ResourceOption) (*Dashboard, error) {
	var resource Dashboard
	err := ctx.ReadResource("squaredup:index/dashboard:Dashboard", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Dashboard resources.
type dashboardState struct {
	// The content of the dashboard. This is the rendered dashboard template with the template bindings applied.
	DashboardContent *string `pulumi:"dashboardContent"`
	// Dashboard template to use for the dashboard
	DashboardTemplate *string `pulumi:"dashboardTemplate"`
	// The display name of the dashboard
	DisplayName *string `pulumi:"displayName"`
	// The group of the dashboard
	Group *string `pulumi:"group"`
	// The last updated date of the dashboard
	LastUpdated *string `pulumi:"lastUpdated"`
	// The name of the dashboard
	Name *string `pulumi:"name"`
	// The schema version of the dashboard
	SchemaVersion *string `pulumi:"schemaVersion"`
	// Template Bindings used for replacing mustache template in the dashboard template. Needs to be a JSON encoded string.
	TemplateBindings *string `pulumi:"templateBindings"`
	// The ID of the workspace where the dashboard is located
	WorkspaceId *string `pulumi:"workspaceId"`
}

type DashboardState struct {
	// The content of the dashboard. This is the rendered dashboard template with the template bindings applied.
	DashboardContent pulumi.StringPtrInput
	// Dashboard template to use for the dashboard
	DashboardTemplate pulumi.StringPtrInput
	// The display name of the dashboard
	DisplayName pulumi.StringPtrInput
	// The group of the dashboard
	Group pulumi.StringPtrInput
	// The last updated date of the dashboard
	LastUpdated pulumi.StringPtrInput
	// The name of the dashboard
	Name pulumi.StringPtrInput
	// The schema version of the dashboard
	SchemaVersion pulumi.StringPtrInput
	// Template Bindings used for replacing mustache template in the dashboard template. Needs to be a JSON encoded string.
	TemplateBindings pulumi.StringPtrInput
	// The ID of the workspace where the dashboard is located
	WorkspaceId pulumi.StringPtrInput
}

func (DashboardState) ElementType() reflect.Type {
	return reflect.TypeOf((*dashboardState)(nil)).Elem()
}

type dashboardArgs struct {
	// Dashboard template to use for the dashboard
	DashboardTemplate string `pulumi:"dashboardTemplate"`
	// The display name of the dashboard
	DisplayName string `pulumi:"displayName"`
	// Template Bindings used for replacing mustache template in the dashboard template. Needs to be a JSON encoded string.
	TemplateBindings *string `pulumi:"templateBindings"`
	// The ID of the workspace where the dashboard is located
	WorkspaceId string `pulumi:"workspaceId"`
}

// The set of arguments for constructing a Dashboard resource.
type DashboardArgs struct {
	// Dashboard template to use for the dashboard
	DashboardTemplate pulumi.StringInput
	// The display name of the dashboard
	DisplayName pulumi.StringInput
	// Template Bindings used for replacing mustache template in the dashboard template. Needs to be a JSON encoded string.
	TemplateBindings pulumi.StringPtrInput
	// The ID of the workspace where the dashboard is located
	WorkspaceId pulumi.StringInput
}

func (DashboardArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dashboardArgs)(nil)).Elem()
}

type DashboardInput interface {
	pulumi.Input

	ToDashboardOutput() DashboardOutput
	ToDashboardOutputWithContext(ctx context.Context) DashboardOutput
}

func (*Dashboard) ElementType() reflect.Type {
	return reflect.TypeOf((**Dashboard)(nil)).Elem()
}

func (i *Dashboard) ToDashboardOutput() DashboardOutput {
	return i.ToDashboardOutputWithContext(context.Background())
}

func (i *Dashboard) ToDashboardOutputWithContext(ctx context.Context) DashboardOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardOutput)
}

func (i *Dashboard) ToOutput(ctx context.Context) pulumix.Output[*Dashboard] {
	return pulumix.Output[*Dashboard]{
		OutputState: i.ToDashboardOutputWithContext(ctx).OutputState,
	}
}

// DashboardArrayInput is an input type that accepts DashboardArray and DashboardArrayOutput values.
// You can construct a concrete instance of `DashboardArrayInput` via:
//
//	DashboardArray{ DashboardArgs{...} }
type DashboardArrayInput interface {
	pulumi.Input

	ToDashboardArrayOutput() DashboardArrayOutput
	ToDashboardArrayOutputWithContext(context.Context) DashboardArrayOutput
}

type DashboardArray []DashboardInput

func (DashboardArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Dashboard)(nil)).Elem()
}

func (i DashboardArray) ToDashboardArrayOutput() DashboardArrayOutput {
	return i.ToDashboardArrayOutputWithContext(context.Background())
}

func (i DashboardArray) ToDashboardArrayOutputWithContext(ctx context.Context) DashboardArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardArrayOutput)
}

func (i DashboardArray) ToOutput(ctx context.Context) pulumix.Output[[]*Dashboard] {
	return pulumix.Output[[]*Dashboard]{
		OutputState: i.ToDashboardArrayOutputWithContext(ctx).OutputState,
	}
}

// DashboardMapInput is an input type that accepts DashboardMap and DashboardMapOutput values.
// You can construct a concrete instance of `DashboardMapInput` via:
//
//	DashboardMap{ "key": DashboardArgs{...} }
type DashboardMapInput interface {
	pulumi.Input

	ToDashboardMapOutput() DashboardMapOutput
	ToDashboardMapOutputWithContext(context.Context) DashboardMapOutput
}

type DashboardMap map[string]DashboardInput

func (DashboardMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Dashboard)(nil)).Elem()
}

func (i DashboardMap) ToDashboardMapOutput() DashboardMapOutput {
	return i.ToDashboardMapOutputWithContext(context.Background())
}

func (i DashboardMap) ToDashboardMapOutputWithContext(ctx context.Context) DashboardMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardMapOutput)
}

func (i DashboardMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*Dashboard] {
	return pulumix.Output[map[string]*Dashboard]{
		OutputState: i.ToDashboardMapOutputWithContext(ctx).OutputState,
	}
}

type DashboardOutput struct{ *pulumi.OutputState }

func (DashboardOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Dashboard)(nil)).Elem()
}

func (o DashboardOutput) ToDashboardOutput() DashboardOutput {
	return o
}

func (o DashboardOutput) ToDashboardOutputWithContext(ctx context.Context) DashboardOutput {
	return o
}

func (o DashboardOutput) ToOutput(ctx context.Context) pulumix.Output[*Dashboard] {
	return pulumix.Output[*Dashboard]{
		OutputState: o.OutputState,
	}
}

// The content of the dashboard. This is the rendered dashboard template with the template bindings applied.
func (o DashboardOutput) DashboardContent() pulumi.StringOutput {
	return o.ApplyT(func(v *Dashboard) pulumi.StringOutput { return v.DashboardContent }).(pulumi.StringOutput)
}

// Dashboard template to use for the dashboard
func (o DashboardOutput) DashboardTemplate() pulumi.StringOutput {
	return o.ApplyT(func(v *Dashboard) pulumi.StringOutput { return v.DashboardTemplate }).(pulumi.StringOutput)
}

// The display name of the dashboard
func (o DashboardOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *Dashboard) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// The group of the dashboard
func (o DashboardOutput) Group() pulumi.StringOutput {
	return o.ApplyT(func(v *Dashboard) pulumi.StringOutput { return v.Group }).(pulumi.StringOutput)
}

// The last updated date of the dashboard
func (o DashboardOutput) LastUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v *Dashboard) pulumi.StringOutput { return v.LastUpdated }).(pulumi.StringOutput)
}

// The name of the dashboard
func (o DashboardOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Dashboard) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The schema version of the dashboard
func (o DashboardOutput) SchemaVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Dashboard) pulumi.StringOutput { return v.SchemaVersion }).(pulumi.StringOutput)
}

// Template Bindings used for replacing mustache template in the dashboard template. Needs to be a JSON encoded string.
func (o DashboardOutput) TemplateBindings() pulumi.StringOutput {
	return o.ApplyT(func(v *Dashboard) pulumi.StringOutput { return v.TemplateBindings }).(pulumi.StringOutput)
}

// The ID of the workspace where the dashboard is located
func (o DashboardOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Dashboard) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

type DashboardArrayOutput struct{ *pulumi.OutputState }

func (DashboardArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Dashboard)(nil)).Elem()
}

func (o DashboardArrayOutput) ToDashboardArrayOutput() DashboardArrayOutput {
	return o
}

func (o DashboardArrayOutput) ToDashboardArrayOutputWithContext(ctx context.Context) DashboardArrayOutput {
	return o
}

func (o DashboardArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*Dashboard] {
	return pulumix.Output[[]*Dashboard]{
		OutputState: o.OutputState,
	}
}

func (o DashboardArrayOutput) Index(i pulumi.IntInput) DashboardOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Dashboard {
		return vs[0].([]*Dashboard)[vs[1].(int)]
	}).(DashboardOutput)
}

type DashboardMapOutput struct{ *pulumi.OutputState }

func (DashboardMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Dashboard)(nil)).Elem()
}

func (o DashboardMapOutput) ToDashboardMapOutput() DashboardMapOutput {
	return o
}

func (o DashboardMapOutput) ToDashboardMapOutputWithContext(ctx context.Context) DashboardMapOutput {
	return o
}

func (o DashboardMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*Dashboard] {
	return pulumix.Output[map[string]*Dashboard]{
		OutputState: o.OutputState,
	}
}

func (o DashboardMapOutput) MapIndex(k pulumi.StringInput) DashboardOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Dashboard {
		return vs[0].(map[string]*Dashboard)[vs[1].(string)]
	}).(DashboardOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardInput)(nil)).Elem(), &Dashboard{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardArrayInput)(nil)).Elem(), DashboardArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardMapInput)(nil)).Elem(), DashboardMap{})
	pulumi.RegisterOutputType(DashboardOutput{})
	pulumi.RegisterOutputType(DashboardArrayOutput{})
	pulumi.RegisterOutputType(DashboardMapOutput{})
}
