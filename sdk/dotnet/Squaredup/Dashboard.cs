// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace squaredup.SquaredUpPackage.Squaredup
{
    /// <summary>
    /// Dashboard are used to visualize data from Data Sources
    /// 
    /// ## Import
    /// 
    /// Dashboards can be imported by specifying dashboard id.
    /// 
    /// ```sh
    ///  $ pulumi import squaredup:index/dashboard:Dashboard example dash-123
    /// ```
    /// </summary>
    [SquaredupResourceType("squaredup:index/dashboard:Dashboard")]
    public partial class Dashboard : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The content of the dashboard. This is the rendered dashboard template with the template bindings applied.
        /// </summary>
        [Output("dashboardContent")]
        public Output<string> DashboardContent { get; private set; } = null!;

        /// <summary>
        /// Dashboard template to use for the dashboard
        /// </summary>
        [Output("dashboardTemplate")]
        public Output<string> DashboardTemplate { get; private set; } = null!;

        /// <summary>
        /// The display name of the dashboard
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// The group of the dashboard
        /// </summary>
        [Output("group")]
        public Output<string> Group { get; private set; } = null!;

        /// <summary>
        /// The last updated date of the dashboard
        /// </summary>
        [Output("lastUpdated")]
        public Output<string> LastUpdated { get; private set; } = null!;

        /// <summary>
        /// The name of the dashboard
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The schema version of the dashboard
        /// </summary>
        [Output("schemaVersion")]
        public Output<string> SchemaVersion { get; private set; } = null!;

        /// <summary>
        /// Template Bindings used for replacing mustache template in the dashboard template. Needs to be a JSON encoded string.
        /// </summary>
        [Output("templateBindings")]
        public Output<string> TemplateBindings { get; private set; } = null!;

        /// <summary>
        /// The ID of the workspace where the dashboard is located
        /// </summary>
        [Output("workspaceId")]
        public Output<string> WorkspaceId { get; private set; } = null!;


        /// <summary>
        /// Create a Dashboard resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Dashboard(string name, DashboardArgs args, CustomResourceOptions? options = null)
            : base("squaredup:index/dashboard:Dashboard", name, args ?? new DashboardArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Dashboard(string name, Input<string> id, DashboardState? state = null, CustomResourceOptions? options = null)
            : base("squaredup:index/dashboard:Dashboard", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/squaredup/pulumi-squaredup",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Dashboard resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Dashboard Get(string name, Input<string> id, DashboardState? state = null, CustomResourceOptions? options = null)
        {
            return new Dashboard(name, id, state, options);
        }
    }

    public sealed class DashboardArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Dashboard template to use for the dashboard
        /// </summary>
        [Input("dashboardTemplate", required: true)]
        public Input<string> DashboardTemplate { get; set; } = null!;

        /// <summary>
        /// The display name of the dashboard
        /// </summary>
        [Input("displayName", required: true)]
        public Input<string> DisplayName { get; set; } = null!;

        /// <summary>
        /// Template Bindings used for replacing mustache template in the dashboard template. Needs to be a JSON encoded string.
        /// </summary>
        [Input("templateBindings")]
        public Input<string>? TemplateBindings { get; set; }

        /// <summary>
        /// The ID of the workspace where the dashboard is located
        /// </summary>
        [Input("workspaceId", required: true)]
        public Input<string> WorkspaceId { get; set; } = null!;

        public DashboardArgs()
        {
        }
        public static new DashboardArgs Empty => new DashboardArgs();
    }

    public sealed class DashboardState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The content of the dashboard. This is the rendered dashboard template with the template bindings applied.
        /// </summary>
        [Input("dashboardContent")]
        public Input<string>? DashboardContent { get; set; }

        /// <summary>
        /// Dashboard template to use for the dashboard
        /// </summary>
        [Input("dashboardTemplate")]
        public Input<string>? DashboardTemplate { get; set; }

        /// <summary>
        /// The display name of the dashboard
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// The group of the dashboard
        /// </summary>
        [Input("group")]
        public Input<string>? Group { get; set; }

        /// <summary>
        /// The last updated date of the dashboard
        /// </summary>
        [Input("lastUpdated")]
        public Input<string>? LastUpdated { get; set; }

        /// <summary>
        /// The name of the dashboard
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The schema version of the dashboard
        /// </summary>
        [Input("schemaVersion")]
        public Input<string>? SchemaVersion { get; set; }

        /// <summary>
        /// Template Bindings used for replacing mustache template in the dashboard template. Needs to be a JSON encoded string.
        /// </summary>
        [Input("templateBindings")]
        public Input<string>? TemplateBindings { get; set; }

        /// <summary>
        /// The ID of the workspace where the dashboard is located
        /// </summary>
        [Input("workspaceId")]
        public Input<string>? WorkspaceId { get; set; }

        public DashboardState()
        {
        }
        public static new DashboardState Empty => new DashboardState();
    }
}
