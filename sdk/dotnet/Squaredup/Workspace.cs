// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace squaredup.SquaredUpPackage.Squaredup
{
    /// <summary>
    /// Each workspace has its own dashboards, data sources, monitors and scopes.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Squaredup = Pulumi.Squaredup;
    /// using Squaredup = squaredup.SquaredUpPackage.Squaredup;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var sampleData = Squaredup.GetDatasources.Invoke(new()
    ///     {
    ///         DataSourceName = "Sample Data",
    ///     });
    /// 
    ///     var sampleDataSource = new Squaredup.Datasource("sampleDataSource", new()
    ///     {
    ///         DisplayName = "Sample Data",
    ///         DataSourceName = sampleData.Apply(getDatasourcesResult =&gt; getDatasourcesResult.Plugins[0]?.DisplayName),
    ///     });
    /// 
    ///     var applicationWorkspace = new Squaredup.Workspace("applicationWorkspace", new()
    ///     {
    ///         DisplayName = "Application Team",
    ///         Description = "Workspace with Dashboards for Application Team",
    ///     });
    /// 
    ///     var devopsWorkspace = new Squaredup.Workspace("devopsWorkspace", new()
    ///     {
    ///         DisplayName = "DevOps Team",
    ///         Description = "Workspace with Dashboards for DevOps Team",
    ///         Type = "application",
    ///         Tags = new[]
    ///         {
    ///             "terraform",
    ///             "auto-created",
    ///         },
    ///         OpenAccessEnabled = true,
    ///         WorkspacesLinks = new[]
    ///         {
    ///             applicationWorkspace.Id,
    ///         },
    ///         DatasourcesLinks = new[]
    ///         {
    ///             sampleDataSource.Id,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Workspaces can be imported by specifying workspace id.
    /// 
    /// ```sh
    ///  $ pulumi import squaredup:index/workspace:Workspace example space-123
    /// ```
    /// </summary>
    [SquaredupResourceType("squaredup:index/workspace:Workspace")]
    public partial class Workspace : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Links to plugins
        /// </summary>
        [Output("datasourcesLinks")]
        public Output<ImmutableArray<string>> DatasourcesLinks { get; private set; } = null!;

        /// <summary>
        /// The description of the workspace
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// The display name of the workspace (Displayed in SquaredUp)
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// The last time the workspace was updated
        /// </summary>
        [Output("lastUpdated")]
        public Output<string> LastUpdated { get; private set; } = null!;

        /// <summary>
        /// Whether open access is enabled for the workspace
        /// </summary>
        [Output("openAccessEnabled")]
        public Output<bool> OpenAccessEnabled { get; private set; } = null!;

        /// <summary>
        /// The tags of the workspace
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        /// <summary>
        /// Workspace type that can be one of: 'service', 'team', 'application', 'platform', 'product', 'business service', 'microservice', 'customer', 'website', 'component', 'resource', 'system', 'folder', 'other'.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// Links to workspaces
        /// </summary>
        [Output("workspacesLinks")]
        public Output<ImmutableArray<string>> WorkspacesLinks { get; private set; } = null!;


        /// <summary>
        /// Create a Workspace resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Workspace(string name, WorkspaceArgs args, CustomResourceOptions? options = null)
            : base("squaredup:index/workspace:Workspace", name, args ?? new WorkspaceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Workspace(string name, Input<string> id, WorkspaceState? state = null, CustomResourceOptions? options = null)
            : base("squaredup:index/workspace:Workspace", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/squaredup/pulumi-squaredup",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Workspace resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Workspace Get(string name, Input<string> id, WorkspaceState? state = null, CustomResourceOptions? options = null)
        {
            return new Workspace(name, id, state, options);
        }
    }

    public sealed class WorkspaceArgs : global::Pulumi.ResourceArgs
    {
        [Input("datasourcesLinks")]
        private InputList<string>? _datasourcesLinks;

        /// <summary>
        /// Links to plugins
        /// </summary>
        public InputList<string> DatasourcesLinks
        {
            get => _datasourcesLinks ?? (_datasourcesLinks = new InputList<string>());
            set => _datasourcesLinks = value;
        }

        /// <summary>
        /// The description of the workspace
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The display name of the workspace (Displayed in SquaredUp)
        /// </summary>
        [Input("displayName", required: true)]
        public Input<string> DisplayName { get; set; } = null!;

        /// <summary>
        /// Whether open access is enabled for the workspace
        /// </summary>
        [Input("openAccessEnabled")]
        public Input<bool>? OpenAccessEnabled { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// The tags of the workspace
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Workspace type that can be one of: 'service', 'team', 'application', 'platform', 'product', 'business service', 'microservice', 'customer', 'website', 'component', 'resource', 'system', 'folder', 'other'.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        [Input("workspacesLinks")]
        private InputList<string>? _workspacesLinks;

        /// <summary>
        /// Links to workspaces
        /// </summary>
        public InputList<string> WorkspacesLinks
        {
            get => _workspacesLinks ?? (_workspacesLinks = new InputList<string>());
            set => _workspacesLinks = value;
        }

        public WorkspaceArgs()
        {
        }
        public static new WorkspaceArgs Empty => new WorkspaceArgs();
    }

    public sealed class WorkspaceState : global::Pulumi.ResourceArgs
    {
        [Input("datasourcesLinks")]
        private InputList<string>? _datasourcesLinks;

        /// <summary>
        /// Links to plugins
        /// </summary>
        public InputList<string> DatasourcesLinks
        {
            get => _datasourcesLinks ?? (_datasourcesLinks = new InputList<string>());
            set => _datasourcesLinks = value;
        }

        /// <summary>
        /// The description of the workspace
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The display name of the workspace (Displayed in SquaredUp)
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// The last time the workspace was updated
        /// </summary>
        [Input("lastUpdated")]
        public Input<string>? LastUpdated { get; set; }

        /// <summary>
        /// Whether open access is enabled for the workspace
        /// </summary>
        [Input("openAccessEnabled")]
        public Input<bool>? OpenAccessEnabled { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// The tags of the workspace
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Workspace type that can be one of: 'service', 'team', 'application', 'platform', 'product', 'business service', 'microservice', 'customer', 'website', 'component', 'resource', 'system', 'folder', 'other'.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        [Input("workspacesLinks")]
        private InputList<string>? _workspacesLinks;

        /// <summary>
        /// Links to workspaces
        /// </summary>
        public InputList<string> WorkspacesLinks
        {
            get => _workspacesLinks ?? (_workspacesLinks = new InputList<string>());
            set => _workspacesLinks = value;
        }

        public WorkspaceState()
        {
        }
        public static new WorkspaceState Empty => new WorkspaceState();
    }
}
