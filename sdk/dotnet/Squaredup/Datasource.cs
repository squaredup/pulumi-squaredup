// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace squaredup.SquaredUpPackage.Squaredup
{
    /// <summary>
    /// Data Sources are used to query third party APIs and SquaredUp visualizes the results
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Squaredup = Pulumi.Squaredup;
    /// using Squaredup = squaredup.SquaredUpPackage.Squaredup;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var sampleData = Squaredup.GetDatasources.Invoke(new()
    ///     {
    ///         DataSourceName = "Sample Data",
    ///     });
    /// 
    ///     var sampleDataSource = new Squaredup.Datasource("sampleDataSource", new()
    ///     {
    ///         DisplayName = "Sample Data",
    ///         DataSourceName = sampleData.Apply(getDatasourcesResult =&gt; getDatasourcesResult.Plugins[0]?.DisplayName),
    ///     });
    /// 
    ///     var adoDatasource = new Squaredup.Datasource("adoDatasource", new()
    ///     {
    ///         DisplayName = "Azure DevOps",
    ///         DataSourceName = "Azure DevOps",
    ///         Config = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["org"] = "org-name",
    ///             ["accessToken"] = "access-token",
    ///         }),
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Data Source can be imported by specifying datasource id.
    /// 
    /// ```sh
    ///  $ pulumi import squaredup:index/datasource:Datasource example config-123
    /// ```
    /// </summary>
    [SquaredupResourceType("squaredup:index/datasource:Datasource")]
    public partial class Datasource : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of the agent group to which the data source should connect to (on-prem data sources only)
        /// </summary>
        [Output("agentGroupId")]
        public Output<string> AgentGroupId { get; private set; } = null!;

        /// <summary>
        /// Sensitive configuration for the data source. Needs to be a valid JSON
        /// </summary>
        [Output("config")]
        public Output<string?> Config { get; private set; } = null!;

        /// <summary>
        /// Display name of the data source
        /// </summary>
        [Output("dataSourceName")]
        public Output<string> DataSourceName { get; private set; } = null!;

        /// <summary>
        /// The display name of the data source (Displayed in SquaredUp)
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// The last time the data source was updated
        /// </summary>
        [Output("lastUpdated")]
        public Output<string> LastUpdated { get; private set; } = null!;


        /// <summary>
        /// Create a Datasource resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Datasource(string name, DatasourceArgs args, CustomResourceOptions? options = null)
            : base("squaredup:index/datasource:Datasource", name, args ?? new DatasourceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Datasource(string name, Input<string> id, DatasourceState? state = null, CustomResourceOptions? options = null)
            : base("squaredup:index/datasource:Datasource", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/squaredup/pulumi-squaredup",
                AdditionalSecretOutputs =
                {
                    "config",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Datasource resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Datasource Get(string name, Input<string> id, DatasourceState? state = null, CustomResourceOptions? options = null)
        {
            return new Datasource(name, id, state, options);
        }
    }

    public sealed class DatasourceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the agent group to which the data source should connect to (on-prem data sources only)
        /// </summary>
        [Input("agentGroupId")]
        public Input<string>? AgentGroupId { get; set; }

        [Input("config")]
        private Input<string>? _config;

        /// <summary>
        /// Sensitive configuration for the data source. Needs to be a valid JSON
        /// </summary>
        public Input<string>? Config
        {
            get => _config;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _config = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Display name of the data source
        /// </summary>
        [Input("dataSourceName", required: true)]
        public Input<string> DataSourceName { get; set; } = null!;

        /// <summary>
        /// The display name of the data source (Displayed in SquaredUp)
        /// </summary>
        [Input("displayName", required: true)]
        public Input<string> DisplayName { get; set; } = null!;

        public DatasourceArgs()
        {
        }
        public static new DatasourceArgs Empty => new DatasourceArgs();
    }

    public sealed class DatasourceState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the agent group to which the data source should connect to (on-prem data sources only)
        /// </summary>
        [Input("agentGroupId")]
        public Input<string>? AgentGroupId { get; set; }

        [Input("config")]
        private Input<string>? _config;

        /// <summary>
        /// Sensitive configuration for the data source. Needs to be a valid JSON
        /// </summary>
        public Input<string>? Config
        {
            get => _config;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _config = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Display name of the data source
        /// </summary>
        [Input("dataSourceName")]
        public Input<string>? DataSourceName { get; set; }

        /// <summary>
        /// The display name of the data source (Displayed in SquaredUp)
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// The last time the data source was updated
        /// </summary>
        [Input("lastUpdated")]
        public Input<string>? LastUpdated { get; set; }

        public DatasourceState()
        {
        }
        public static new DatasourceState Empty => new DatasourceState();
    }
}
