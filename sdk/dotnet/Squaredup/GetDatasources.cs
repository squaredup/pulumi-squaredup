// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace squaredup.SquaredUpPackage.Squaredup
{
    public static class GetDatasources
    {
        /// <summary>
        /// Data Sources are used to query third party APIs and SquaredUp visualizes the results
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Squaredup = Pulumi.Squaredup;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var sampleData = Squaredup.GetDatasources.Invoke(new()
        ///     {
        ///         DataSourceName = "Sample Data",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetDatasourcesResult> InvokeAsync(GetDatasourcesArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDatasourcesResult>("squaredup:index/getDatasources:getDatasources", args ?? new GetDatasourcesArgs(), options.WithDefaults());

        /// <summary>
        /// Data Sources are used to query third party APIs and SquaredUp visualizes the results
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Squaredup = Pulumi.Squaredup;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var sampleData = Squaredup.GetDatasources.Invoke(new()
        ///     {
        ///         DataSourceName = "Sample Data",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetDatasourcesResult> Invoke(GetDatasourcesInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDatasourcesResult>("squaredup:index/getDatasources:getDatasources", args ?? new GetDatasourcesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDatasourcesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the data source. If not specified, all data sources will be returned.
        /// </summary>
        [Input("dataSourceName")]
        public string? DataSourceName { get; set; }

        public GetDatasourcesArgs()
        {
        }
        public static new GetDatasourcesArgs Empty => new GetDatasourcesArgs();
    }

    public sealed class GetDatasourcesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the data source. If not specified, all data sources will be returned.
        /// </summary>
        [Input("dataSourceName")]
        public Input<string>? DataSourceName { get; set; }

        public GetDatasourcesInvokeArgs()
        {
        }
        public static new GetDatasourcesInvokeArgs Empty => new GetDatasourcesInvokeArgs();
    }


    [OutputType]
    public sealed class GetDatasourcesResult
    {
        /// <summary>
        /// The name of the data source. If not specified, all data sources will be returned.
        /// </summary>
        public readonly string? DataSourceName;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<Outputs.GetDatasourcesPluginResult> Plugins;

        [OutputConstructor]
        private GetDatasourcesResult(
            string? dataSourceName,

            string id,

            ImmutableArray<Outputs.GetDatasourcesPluginResult> plugins)
        {
            DataSourceName = dataSourceName;
            Id = id;
            Plugins = plugins;
        }
    }
}
